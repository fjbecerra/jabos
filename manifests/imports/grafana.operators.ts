// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * A Grafana Dashboard definition.
 *
 * @schema GrafanaDashboard
 */
export class GrafanaDashboard extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GrafanaDashboard"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'grafana.operators/v1',
    kind: 'GrafanaDashboard',
  }

  /**
   * Renders a Kubernetes manifest for "GrafanaDashboard".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GrafanaDashboardProps): any {
    return {
      ...GrafanaDashboard.GVK,
      ...toJson_GrafanaDashboardProps(props),
    };
  }

  /**
   * Defines a "GrafanaDashboard" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GrafanaDashboardProps) {
    super(scope, id, {
      ...GrafanaDashboard.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GrafanaDashboard.GVK,
      ...toJson_GrafanaDashboardProps(resolved),
    };
  }
}

/**
 * A Grafana Dashboard definition.
 *
 * @schema GrafanaDashboard
 */
export interface GrafanaDashboardProps {
  /**
   * A Grafana Dashboard definition. **Must contain exactly one of [`dashboard`, `dashboards`, `grafonnet`]**
   *
   * @schema GrafanaDashboard#spec
   */
  readonly spec: GrafanaDashboardSpec;

  /**
   * @schema GrafanaDashboard#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'GrafanaDashboardProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GrafanaDashboardProps(obj: GrafanaDashboardProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'spec': toJson_GrafanaDashboardSpec(obj.spec),
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Grafana Dashboard definition. **Must contain exactly one of [`dashboard`, `dashboards`, `grafonnet`]**
 *
 * @schema GrafanaDashboardSpec
 */
export interface GrafanaDashboardSpec {
  /**
   * A grafana dashboard model (`JSON`)
   *
   * @schema GrafanaDashboardSpec#dashboard
   */
  readonly dashboard?: any;

  /**
   * List of grafana dashboard models (`JSON`)
   *
   * @schema GrafanaDashboardSpec#dashboards
   */
  readonly dashboards?: any[];

  /**
   * List of grafonnet files
   *
   * @schema GrafanaDashboardSpec#grafonnet
   */
  readonly grafonnet?: { [key: string]: string };

}

/**
 * Converts an object of type 'GrafanaDashboardSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GrafanaDashboardSpec(obj: GrafanaDashboardSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dashboard': obj.dashboard,
    'dashboards': obj.dashboards?.map(y => y),
    'grafonnet': ((obj.grafonnet) === undefined) ? undefined : (Object.entries(obj.grafonnet).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

